import os
Import('parentEnv', 'STAGE_DIR', 'MODO_SDK_DIR', 'commonLib')

env = parentEnv.Clone()
env.Append(LIBS = [commonLib])

headers = Flatten(Glob('*.h'))	
sources = Flatten(Glob('*.cpp'))
sources += Flatten(env.GlobQObjectSources('*.h'))

plugin = env.SharedLibrary('FabricModo', sources, SHLIBSUFFIX='.lx')
Export('plugin')

# todo: port for other operating systems
installDir = STAGE_DIR.Dir('FabricModo').Dir('win64')

installedPlugin = env.Install(installDir, plugin[0])

installedIndexCfg = env.Install(STAGE_DIR.Dir('FabricModo'), env.File('index.cfg'))

alias = env.Alias('plugin', installedPlugin + installedIndexCfg)
Return('alias')
